import os
import json
from datetime import datetime, timedelta
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from dotenv import load_dotenv
from email_utils import enviar_email

load_dotenv()

SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
SHEET_NAME = "Registo Di√°rio"
CREDENTIALS_FILE = os.getenv("CREDENTIALS_FILE", "credenciais_bot.json")
DESTINATARIO_RELATORIO = "luis.phoenix@tutanota.com"

# --- Autentica√ß√£o Google Sheets ---
json_credentials = os.getenv("GOOGLE_CREDENTIALS_JSON")
if json_credentials:
    creds_dict = json.loads(json_credentials)
    creds = Credentials.from_service_account_info(creds_dict)
else:
    creds = Credentials.from_service_account_file(CREDENTIALS_FILE)

sheet = build('sheets', 'v4', credentials=creds)

# --- Fun√ß√£o para gerar relat√≥rio baseado em Registo Di√°rio ---
def gerar_relatorio(periodo_nome: str, data_inicio: datetime, data_fim: datetime):
    result = sheet.spreadsheets().values().get(
        spreadsheetId=SPREADSHEET_ID,
        range=SHEET_NAME
    ).execute()
    valores = result.get("values", [])
    if not valores:
        return "‚ùå N√£o foi poss√≠vel obter dados da sheet."

    headers = valores[0]
    rows = valores[1:]
    idx = lambda nome: headers.index(nome)

    adesoes = []
    renovacoes = []
    expirados = []
    soma_total = 0.0

    for row in rows:
        row += [""] * (len(headers) - len(row))  # completar linhas curtas
        try:
            data_reg = datetime.strptime(row[idx("Data")], "%d/%m/%Y")
        except:
            continue

        if not (data_inicio.date() <= data_reg.date() <= data_fim.date()):
            continue

        tipo = row[idx("Tipo")].strip().lower()
        username = row[idx("Username")]
        email = row[idx("Email")]
        plano = row[idx("Plano")]
        total_str = row[idx("Total (‚Ç¨)")]
        origem = row[idx("Fonte")]

        linha_info = f"‚Ä¢ {username} / {email} / {plano} [{origem}]"

        try:
            total = float(total_str.replace(",", "."))
        except:
            total = 0.0

        if tipo == "ades√£o":
            adesoes.append(linha_info)
            soma_total += total
        elif tipo == "renova√ß√£o":
            renovacoes.append(linha_info)
            soma_total += total
        elif tipo == "expirado":
            expirados.append(f"‚Ä¢ {username} / {email} [{origem}]")

    texto = f"RELAT√ìRIO {periodo_nome.upper()} ‚Äì 4US\n\n"
    texto += f"Per√≠odo: {data_inicio.strftime('%d/%m/%Y')} a {data_fim.strftime('%d/%m/%Y')}\n\n"
    texto += "‚ûï Ades√µes:\n" + ("\n".join(adesoes) if adesoes else "Nenhuma ades√£o") + f"\n\nTotal: {len(adesoes)}\n\n"
    texto += "üîÑ Renova√ß√µes:\n" + ("\n".join(renovacoes) if renovacoes else "Nenhuma renova√ß√£o") + f"\n\nTotal: {len(renovacoes)}\n\n"
    texto += "üõë Expirados:\n" + ("\n".join(expirados) if expirados else "Nenhum servi√ßo expirado") + f"\n\nTotal: {len(expirados)}\n\n"
    texto += f"üí∞ Total acumulado: {soma_total:.2f} ‚Ç¨\n"

    return texto

# --- Relat√≥rios semanais e mensais ---
def enviar_relatorio():
    hoje = datetime.now()
    inicio_semana = hoje - timedelta(days=hoje.weekday())
    inicio_mes = hoje.replace(day=1)

    relatorio_semanal = gerar_relatorio("Semanal", inicio_semana, hoje)
    relatorio_mensal = gerar_relatorio("Mensal", inicio_mes, hoje)

    enviar_email(
        destinatario=DESTINATARIO_RELATORIO,
        assunto=f"[4US] Relat√≥rio Semanal ‚Äì {hoje.strftime('%d/%m/%Y')} (autom√°tico)",
        corpo=relatorio_semanal,
        username="Relat√≥rio",
        motivo="Relat√≥rio semanal autom√°tico"
    )

    enviar_email(
        destinatario=DESTINATARIO_RELATORIO,
        assunto=f"[4US] Relat√≥rio Mensal ‚Äì {hoje.strftime('%d/%m/%Y')} (autom√°tico)",
        corpo=relatorio_mensal,
        username="Relat√≥rio",
        motivo="Relat√≥rio mensal autom√°tico"
    )

# --- Execu√ß√£o manual (caso corras o ficheiro direto) ---
if __name__ == "__main__":
    enviar_relatorio()
